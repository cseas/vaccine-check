{"version":3,"sources":["api.js","components/LastFound.jsx","sounds/alert.mp3","components/Results.jsx","App.jsx","index.jsx"],"names":["API_BASE_PUBLIC","pincode","a","date","getDate","axios","get","then","response","data","today","Date","month","getMonth","getFullYear","join","LastFound","slots","time","minutes","fontSize","color","padding","getTime","timestamp","hours","getHours","getMinutes","Results","useState","setTime","setDate","fullHouse","setFullHouse","setMinutes","setSlots","useSound","alertSfx","play","isPlaying","stop","useEffect","useQuery","getLocationsByPincode","refetchInterval","isLoading","isError","error","dataUpdatedAt","style","display","justifyContent","isIndeterminate","console","log","message","availableLocations","centers","center","sessions","session","min_age_limit","available_capacity","push","location","name","getAvailableLocations","length","diff","Math","floor","status","margin","reduce","accumulator","previousValue","getTotalSlots","variant","flexDirection","alignItems","textAlign","marginTop","boxSize","mr","mt","mb","onClick","isNumeric","map","index","App","firstPincode","setFirstPincode","secondPincode","setSecondPincode","maxW","onChange","valueString","valueNumber","value","precision","step","min","max","background","href","rel","target","theme","extendTheme","styles","global","body","bg","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.5404019a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_PUBLIC =\n  \"https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin\";\n\nexport async function getLocationsByPincode(pincode) {\n  if (!pincode) {\n    return null;\n  }\n\n  const date = getDate();\n\n  return await axios\n    .get(`${API_BASE_PUBLIC}?pincode=${pincode}&date=${date}`)\n    .then((response) => response.data);\n}\n\nfunction getDate() {\n  const today = new Date();\n\n  let date = today.getDate();\n  date = date < 10 ? \"0\" + date : date;\n\n  let month = today.getMonth();\n  month += 1;\n  month = month < 10 ? \"0\" + month : month;\n\n  let year = today.getFullYear();\n\n  return [date, month, year].join(\"-\");\n}\n","import { Text } from \"@chakra-ui/react\";\n\nexport function LastFound({ slots, time, minutes }) {\n  if (slots === 0) {\n    return null;\n  }\n\n  return (\n    <Text fontSize=\"md\" color=\"blue.700\" padding=\"1rem 0 0\">\n      {slots} slots were available here at {time} that got booked in less than{\" \"}\n      {minutes} minutes.\n    </Text>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/alert.e1f44fda.mp3\";","import { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { getLocationsByPincode } from \"../api\";\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  CircularProgress,\n  Button,\n} from \"@chakra-ui/react\";\nimport { LastFound } from \"./LastFound\";\nimport alertSfx from \"../sounds/alert.mp3\";\nimport useSound from \"use-sound\";\n\nconst MIN_AGE_LIMIT = 18;\n\nfunction getAvailableLocations(centers) {\n  let availableLocations = [];\n  for (let center of centers) {\n    for (let session of center.sessions) {\n      if (\n        session.min_age_limit === MIN_AGE_LIMIT &&\n        session.available_capacity > 0\n      ) {\n        availableLocations.push({\n          location: center.name,\n          date: session.date,\n          slots: session.available_capacity,\n        });\n      }\n    }\n  }\n  return availableLocations;\n}\n\nfunction getTotalSlots(availableLocations) {\n  return availableLocations.reduce((accumulator, previousValue) => {\n    return accumulator + previousValue.slots;\n  }, 0);\n}\n\nfunction getTime(timestamp) {\n  const date = timestamp ? new Date(timestamp) : new Date();\n\n  let hours = date.getHours();\n  hours = hours < 10 ? \"0\" + hours : hours;\n\n  let minutes = date.getMinutes();\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n\n  return hours + \":\" + minutes;\n}\n\nfunction getMinutes(date) {\n  const diff = new Date() - date;\n  return Math.floor(diff / 1000 / 60);\n}\n\nexport function Results({ pincode }) {\n  const [time, setTime] = useState(\"00:00\");\n  const [date, setDate] = useState(new Date());\n  const [fullHouse, setFullHouse] = useState(true);\n  const [minutes, setMinutes] = useState(0);\n  const [slots, setSlots] = useState(0);\n  const [play, { isPlaying, stop }] = useSound(alertSfx);\n\n  useEffect(() => {\n    setSlots(0);\n  }, [pincode]);\n\n  const { data, isLoading, isError, error, dataUpdatedAt } = useQuery(\n    [\"locations\", pincode],\n    () => getLocationsByPincode(pincode),\n    {\n      refetchInterval: 3 * 60 * 1000, // 3 minutes\n    }\n  );\n\n  if (!pincode) {\n    return <></>;\n  }\n\n  if (isLoading) {\n    return (\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", padding: \"2rem 0\" }}\n      >\n        <CircularProgress isIndeterminate color=\"green.300\" />\n      </div>\n    );\n  }\n\n  if (isError) {\n    console.log(error);\n    return <>Error occurred: {error.message}</>;\n  }\n\n  const centers = data.centers;\n  const availableLocations = getAvailableLocations(centers);\n\n  if (availableLocations.length === 0) {\n    if (!fullHouse) {\n      setFullHouse(true);\n      setMinutes(getMinutes(date));\n    }\n\n    return (\n      <>\n        <Alert status=\"error\" margin=\"2rem 0 0\">\n          <AlertIcon />\n          All centres for {pincode} are booked at the moment. Updated at{\" \"}\n          {getTime(dataUpdatedAt)}.\n        </Alert>\n        <LastFound slots={slots} time={time} minutes={minutes} />\n      </>\n    );\n  }\n\n  if (fullHouse) {\n    setSlots(getTotalSlots(availableLocations));\n    setTime(getTime());\n    setDate(new Date());\n    setFullHouse(false);\n    play();\n  }\n\n  return (\n    <>\n      <Alert\n        status=\"success\"\n        variant=\"subtle\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        textAlign=\"center\"\n        marginTop=\"2rem\"\n        padding=\"1rem 0\"\n      >\n        <AlertIcon boxSize=\"40px\" mr={0} />\n        <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n          Slots available for pincode {pincode}!\n        </AlertTitle>\n        {isPlaying ? <Button onClick={() => stop()}>Mute Alarm</Button> : null}\n      </Alert>\n      <Table variant=\"simple\" margin=\"2rem 0 0\">\n        <TableCaption>\n          Go to CoWin website to schedule an appointment\n        </TableCaption>\n        <Thead>\n          <Tr>\n            <Th>Centre</Th>\n            <Th>Date</Th>\n            <Th isNumeric>Slots Left</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {availableLocations.map((session, index) => (\n            <Tr key={index}>\n              <Td>{session.location}</Td>\n              <Td>{session.date}</Td>\n              <Td isNumeric>{session.slots}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </>\n  );\n}\n","import {\n  Container,\n  Text,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n} from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport { Results } from \"./components/Results\";\n\nexport function App() {\n  const [firstPincode, setFirstPincode] = useState(null);\n  const [secondPincode, setSecondPincode] = useState(null);\n\n  function firstOnChange(value) {\n    if (value >= 110000) {\n      setFirstPincode(value);\n    }\n  }\n\n  function secondOnChange(value) {\n    if (value >= 110000) {\n      setSecondPincode(value);\n    }\n  }\n\n  return (\n    <>\n      <Container maxW=\"container.sm\">\n        <Text fontSize=\"3xl\" padding=\"1rem 0\" textAlign=\"center\">\n          India vaccine centre availability checker\n        </Text>\n\n        <Text fontSize=\"sm\" padding=\"0.5rem 0\">\n          First Pincode\n        </Text>\n        <NumberInput\n          onChange={(valueString, valueNumber) => firstOnChange(valueNumber)}\n          precision={0}\n          step={1}\n          min={110000}\n          max={999999}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        <Text fontSize=\"sm\" padding=\"0.5rem 0\">\n          Second Pincode\n        </Text>\n        <NumberInput\n          onChange={(valueString, valueNumber) => secondOnChange(valueNumber)}\n          precision={0}\n          step={1}\n          min={110000}\n          max={999999}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        <Results pincode={firstPincode} />\n        <Results pincode={secondPincode} />\n\n        <Text fontSize=\"sm\" padding=\"2rem 0\">\n          <strong>Note:</strong> This utility only checks for vaccination\n          centres for age group 18-44 years. This page will automatically\n          refresh periodically to check the availability of centres for your\n          selected pincodes.\n        </Text>\n      </Container>\n      <Text\n        fontSize=\"sm\"\n        textAlign=\"center\"\n        marginTop=\"21rem\"\n        padding=\"1rem 0\"\n        background=\"gray.100\"\n      >\n        Made by{\" \"}\n        <u>\n          <a\n            href=\"https://www.linkedin.com/in/thatniceman\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            Abhijeet Singh\n          </a>\n        </u>\n      </Text>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { extendTheme, ChakraProvider } from \"@chakra-ui/react\";\n\nconst theme = extendTheme({\n  styles: {\n    global: {\n      body: {\n        bg: \"gray.50\",\n      },\n    },\n  },\n});\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}