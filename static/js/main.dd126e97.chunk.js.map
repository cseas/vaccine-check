{"version":3,"sources":["api.js","components/Results.js","App.js","index.js"],"names":["pincode","a","date","getDate","axios","get","then","response","data","today","Date","month","getMonth","getFullYear","join","Results","useQuery","getLocationsByPincode","refetchInterval","isLoading","isError","error","style","display","justifyContent","padding","isIndeterminate","color","console","log","message","availableLocations","centers","center","sessions","session","min_age_limit","available_capacity","push","location","name","slots","getAvailableLocations","length","fontSize","status","variant","flexDirection","alignItems","textAlign","marginTop","boxSize","mr","mt","mb","margin","isNumeric","map","App","useState","firstPincode","setFirstPincode","secondPincode","setSecondPincode","maxW","onChange","valueString","valueNumber","value","precision","step","min","max","background","href","target","rel","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.dd126e97.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport async function getLocationsByPincode(pincode) {\n  if (!pincode) {\n    return null;\n  }\n\n  const date = getDate();\n\n  return await axios\n    .get(\n      `https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin?pincode=${pincode}&date=${date}`\n    )\n    .then((response) => response.data);\n}\n\nfunction getDate() {\n  const today = new Date();\n\n  let date = today.getDate();\n  date = date < 10 ? \"0\" + date : date;\n\n  let month = today.getMonth();\n  month += 1;\n\n  let year = today.getFullYear();\n\n  return [date, month, year].join(\"-\");\n}\n","import { useQuery } from \"react-query\";\nimport { CircularProgress, Text } from \"@chakra-ui/react\";\nimport { getLocationsByPincode } from \"../api\";\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/react\";\n\nconst MIN_AGE_LIMIT = 18;\n\nfunction getAvailableLocations(centers) {\n  let availableLocations = [];\n  for (let center of centers) {\n    for (let session of center.sessions) {\n      if (\n        session.min_age_limit === MIN_AGE_LIMIT &&\n        session.available_capacity > 0\n      ) {\n        availableLocations.push({\n          location: center.name,\n          date: session.date,\n          slots: session.available_capacity,\n        });\n      }\n    }\n  }\n  return availableLocations;\n}\n\nexport function Results({ pincode }) {\n  const { data, isLoading, isError, error } = useQuery(\n    [\"locations\", pincode],\n    () => getLocationsByPincode(pincode),\n    {\n      refetchInterval: 30 * 60 * 1000, // 30 minutes\n    }\n  );\n\n  if (!pincode) {\n    return <></>;\n  }\n\n  if (isLoading) {\n    return (\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", padding: \"2rem 0\" }}\n      >\n        <CircularProgress isIndeterminate color=\"green.300\" />\n      </div>\n    );\n  }\n\n  if (isError) {\n    console.log(error);\n    return <>Error occurred: {error.message}</>;\n  }\n\n  const centers = data.centers;\n  const availableLocations = getAvailableLocations(centers);\n\n  if (availableLocations.length === 0) {\n    return (\n      <>\n        <Text fontSize=\"lg\" color=\"red.700\" padding=\"2rem 0 0\">\n          No centres available right now for your selected pincode {pincode}.\n          This page will automatically refresh periodically to check whether a\n          centre is available.\n        </Text>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Alert\n        status=\"success\"\n        variant=\"subtle\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        textAlign=\"center\"\n        marginTop=\"2rem\"\n        padding=\"1rem 0\"\n      >\n        <AlertIcon boxSize=\"40px\" mr={0} />\n        <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n          Slots available for pincode {pincode}!\n        </AlertTitle>\n      </Alert>\n      <Table variant=\"simple\" margin=\"2rem 0 0\">\n        <TableCaption>\n          Go to CoWin website to schedule an appointment\n        </TableCaption>\n        <Thead>\n          <Tr>\n            <Th>Centre</Th>\n            <Th>Date</Th>\n            <Th isNumeric>Slots Left</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {availableLocations.map((session) => (\n            <Tr>\n              <Td>{session.location}</Td>\n              <Td>{session.date}</Td>\n              <Td isNumeric>{session.slots}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </Table>\n    </>\n  );\n}\n","import {\n  Container,\n  Text,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n} from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport { Results } from \"./components/Results\";\n\nexport function App() {\n  const [firstPincode, setFirstPincode] = useState(null);\n  const [secondPincode, setSecondPincode] = useState(null);\n\n  function firstOnChange(value) {\n    if (value >= 110000) {\n      setFirstPincode(value);\n    }\n  }\n\n  function secondOnChange(value) {\n    if (value >= 100000) {\n      setSecondPincode(value);\n    }\n  }\n\n  return (\n    <>\n      <Container maxW=\"container.sm\">\n        <Text fontSize=\"3xl\" padding=\"1rem 0\" textAlign=\"center\">\n          India vaccine centre availability checker\n        </Text>\n\n        <Text fontSize=\"md\" padding=\"1rem 0\">\n          First Pincode\n        </Text>\n        <NumberInput\n          onChange={(valueString, valueNumber) => firstOnChange(valueNumber)}\n          precision={0}\n          step={1}\n          min={110000}\n          max={999999}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        <Text fontSize=\"md\" padding=\"1rem 0\">\n          Second Pincode\n        </Text>\n        <NumberInput\n          onChange={(valueString, valueNumber) => secondOnChange(valueNumber)}\n          precision={0}\n          step={1}\n          min={110000}\n          max={999999}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n\n        <Results pincode={firstPincode} />\n        <Results pincode={secondPincode} />\n\n        <Text fontSize=\"md\" padding=\"2rem 0\">\n          <strong>Note:</strong> This utility only checks if a vaccination\n          centre is available with minimum age limit 18.\n        </Text>\n      </Container>\n      <Text\n        fontSize=\"sm\"\n        textAlign=\"center\"\n        marginTop=\"21rem\"\n        padding=\"1rem 0\"\n        background=\"gray.100\"\n      >\n        Made by{\" \"}\n        <u>\n          <a\n            href=\"https://www.linkedin.com/in/thatniceman\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Abhijeet Singh\n          </a>\n        </u>\n      </Text>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}